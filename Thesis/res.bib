@article{Benelallam2019,
abstract = {The Maven Central Repository provides an extraordinary source of data to understand complex architecture and evolution phenomena among Java applications. As of September 6, 2018, this repository includes 2.8M artifacts (compiled piece of code implemented in a JVM-based language), each of which is characterized with metadata such as exact version, date of upload and list of dependencies towards other artifacts. Today, one who wants to analyze the complete ecosystem of Maven artifacts and their dependencies faces two key challenges: (i) this is a huge data set; and (ii) dependency relationships among artifacts are not modeled explicitly and cannot be queried. In this paper, we present the Maven Dependency Graph. This open source data set provides two contributions: a snapshot of the whole Maven Central taken on September 6, 2018, stored in a graph database in which we explicitly model all dependencies; an open source infrastructure to query this huge dataset.},
archivePrefix = {arXiv},
arxivId = {arXiv:1901.05392v1},
author = {Benelallam, Amine and Harrand, Nicolas and Soto-Valero, Cesar and Baudry, Benoit and Barais, Olivier},
doi = {10.1109/MSR.2019.00060},
eprint = {arXiv:1901.05392v1},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/papers per utilitzar/1901.05392.pdf:pdf},
isbn = {9781728134123},
issn = {21601860},
journal = {IEEE International Working Conference on Mining Software Repositories},
keywords = {Dataset,Maven Central,Mining,Temporal Graph},
mendeley-groups = {Thesis/1. Introduction},
pages = {344--348},
title = {{The maven dependency graph: A temporal graph-based representation of maven central}},
volume = {2019-May},
year = {2019}
}


@inproceedings{kula2014visualizing,
  title={Visualizing the evolution of systems and their library dependencies},
  author={Kula, Raula Gaikovina and De Roover, Coen and German, Daniel and Ishio, Takashi and Inoue, Katsuro},
  booktitle={2014 Second IEEE Working Conference on Software Visualization},
  pages={127--136},
  year={2014},
  organization={IEEE}
}

@misc{hejderup2018prazi,
  title={PRAZI: From Package-based to Precise Call-based Dependency Network Analyses},
  author={Hejderup, Joseph and Beller, Moritz and Gousios, Georgios},
  year={2018},
  publisher={Workingpaper}
}

@inproceedings{wieringa2012technical,
  title={Technical action research as a validation method in information systems design science},
  author={Wieringa, Roel and Moral{\i}, Ay{\c{s}}e},
  booktitle={International Conference on Design Science Research in Information Systems},
  pages={220--238},
  year={2012},
  organization={Springer}
}

@article{srinivasan2014software,
  title={Software metrics validation methodologies in software engineering},
  author={Srinivasan, KP and Devi, T},
  journal={International Journal of Software Engineering \& Applications},
  volume={5},
  number={6},
  pages={87},
  year={2014},
  publisher={Academy \& Industry Research Collaboration Center (AIRCC)}
}

@article{soto2020comprehensive,
  title={A Comprehensive Study of Bloated Dependencies in the Maven Ecosystem},
  author={Soto-Valero, C{\'e}sar and Harrand, Nicolas and Monperrus, Martin and Baudry, Benoit},
  journal={arXiv preprint arXiv:2001.07808},
  year={2020}
}

@misc{hejderup2015dependencies,
  title={In dependencies we trust: How vulnerable are dependencies in software modules?},
  author={Hejderup, JI},
  year={2015}
}

@inproceedings{kikas2017structure,
  title={Structure and evolution of package dependency networks},
  author={Kikas, Riivo and Gousios, Georgios and Dumas, Marlon and Pfahl, Dietmar},
  booktitle={Proceedings of the 14th International Conference on Mining Software Repositories},
  pages={102--112},
  year={2017},
  organization={IEEE press}
}

@article{briand1999unified,
  title={A unified framework for coupling measurement in object-oriented systems},
  author={Briand, Lionel C. and Daly, John W. and Wust, Jurgen K},
  journal={IEEE Transactions on software Engineering},
  volume={25},
  number={1},
  pages={91--121},
  year={1999},
  publisher={IEEE}
}

@inproceedings{poshyvanyk2006conceptual,
  title={The conceptual coupling metrics for object-oriented systems},
  author={Poshyvanyk, Denys and Marcus, Andrian},
  booktitle={2006 22nd IEEE International Conference on Software Maintenance},
  pages={469--478},
  year={2006},
  organization={IEEE}
}

@article{zimmermann2005mining,
  title={Mining version histories to guide software changes},
  author={Zimmermann, Thomas and Zeller, Andreas and Weissgerber, Peter and Diehl, Stephan},
  journal={IEEE Transactions on Software Engineering},
  volume={31},
  number={6},
  pages={429--445},
  year={2005},
  publisher={IEEE}
}

@inproceedings{allen1999measuring,
  title={Measuring coupling and cohesion: An information-theory approach},
  author={Allen, Edward B and Khoshgoftaar, Taghi M},
  booktitle={Proceedings Sixth International Software Metrics Symposium (Cat. No. PR00403)},
  pages={119--127},
  year={1999},
  organization={IEEE}
}

@article{Meneely2012,
abstract = {Context. Researchers proposing a new metric have the burden of proof to demonstrate to the research community that the metric is acceptable in its intended use. This burden of proof is provided through the multi-faceted, scientific, and objective process of software metrics validation. Over the last 40 years, however, researchers have debated what constitutes a "valid" metric. Aim. the debate over what constitutes a valid metric centers on software metrics validation criteria. the objective of this article is to guide researchers in making sound contributions to the field of software engineering metrics by providing a practical summary of the metrics validation criteria found in the academic literature. Method.We conducted a systematic literature review that began with 2,288 papers and ultimately focused on 20 papers. After extracting 47 unique validation criteria from these 20 papers, we performed a comparative analysis to explore the relationships amongst the criteria. Results. Our 47 validation criteria represent a diverse view of what constitutes a valid metric.We present an analysis of the criteria's categorization, conflicts, common themes, and philosophical motivations behind the validation criteria. Conclusions. Although the 47 validation criteria are not conflict-free, the diversity of motivations and philosophies behind the validation criteria indicates that metrics validation is complex. Researchers proposing new metrics should consider the applicability of the validation criteria in terms of our categorization and analysis. Rather than arbitrarily choosing validation criteria for each metric, researchers should choose criteria that can confirm that the metric is appropriate for its intended use. We conclude that metrics validation criteria provide answers to questions that researchers have about the merits and limitations of a metric. {\textcopyright} 2012 ACM.},
author = {Meneely, Andrew and Smith, Ben and Williams, Laurie},
doi = {10.1145/2377656.2377661},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/PapersExcel/meneely2012.pdf:pdf},
issn = {1049331X},
journal = {ACM Transactions on Software Engineering and Methodology},
keywords = {Software metrics,Systematic literature review,Validation criterion},
mendeley-groups = {Thesis/5. Experiments/Visualization},
number = {4},
title = {{Validating software metrics: A spectrum of philosophies}},
volume = {21},
year = {2012}
}


@inproceedings{pashchenko2018vulnerable,
  title={Vulnerable open source dependencies: Counting those that matter},
  author={Pashchenko, Ivan and Plate, Henrik and Ponta, Serena Elisa and Sabetta, Antonino and Massacci, Fabio},
  booktitle={Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
  pages={42},
  year={2018},
  organization={ACM}
}

@inproceedings{plate2015impact,
  title={Impact assessment for vulnerabilities in open-source software libraries},
  author={Plate, Henrik and Ponta, Serena Elisa and Sabetta, Antonino},
  booktitle={2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={411--420},
  year={2015},
  organization={IEEE}
}

@inproceedings{briand1997investigation,
  title={An investigation into coupling measures for C++},
  author={Briand, Lionel and Devanbu, Prem and Melo, Walcelio},
  booktitle={Proceedings of the 19th international conference on Software engineering},
  pages={412--421},
  year={1997}
}

@techreport{eder1994coupling,
  title={Coupling and cohesion in object-oriented systems},
  author={Eder, Johann and Kappel, Gerti and Schrefl, Michael},
  year={1994},
  institution={Citeseer}
}

@book{hitz1995measuring,
  title={Measuring coupling and cohesion in object-oriented systems},
  author={Hitz, Martin and Montazeri, Behzad},
  year={1995},
  publisher={Citeseer}
}

@article{chidamber1994metrics,
  title={A metrics suite for object oriented design},
  author={Chidamber, Shyam R and Kemerer, Chris F},
  journal={IEEE Transactions on software engineering},
  volume={20},
  number={6},
  pages={476--493},
  year={1994},
  publisher={IEEE}
}

@article{churcher1995towards,
  title={Towards a conceptual framework for object oriented software metrics},
  author={Churcher, Neville I and Shepperd, Martin J},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={20},
  number={2},
  pages={69--75},
  year={1995},
  publisher={ACM New York, NY, USA}
}

@manual{li1993object,
  title={Object-oriented metrics which predict maintainability},
  author={Li, Wei and Henry, Sallie M},
  year={1993}
}

@inproceedings{abreu1995toward,
  title={Toward the design quality evaluation of object-oriented software systems},
  author={Abreu, F Brito and Goul{\~a}o, Miguel and Esteves, Rita},
  booktitle={Proceedings of the 5th International Conference on Software Quality, Austin, Texas, USA},
  pages={44--57},
  year={1995}
}

@misc{fasten2019survey,
  title={A survey of property propagation and aggregation},
  author={Gao, Chushu and Bergmans, Lodewijk and Schrijen, Xander},
  year={2019},
  organization={FASTEN (825328) - Fine-Grained Analysis of Software Ecosystems as Networks}
}

@inproceedings{hejderup2018software,
  title={Software ecosystem call graph for dependency management},
  author={Hejderup, Joseph and van Deursen, Arie and Gousios, Georgios},
  booktitle={2018 IEEE/ACM 40th International Conference on Software Engineering: New Ideas and Emerging Technologies Results (ICSE-NIER)},
  pages={101--104},
  year={2018},
  organization={IEEE}
}

@article{wilkie2000coupling,
  title={Coupling measures and change ripples in C++ application software},
  author={Wilkie, F George and Kitchenham, Barbara A},
  journal={Journal of Systems and Software},
  volume={52},
  number={2-3},
  pages={157--164},
  year={2000},
  publisher={Elsevier}
}

@inproceedings{yang2005detecting,
  title={Detecting indirect coupling},
  author={Yang, Hong Yul and Tempero, Ewan and Berrigan, Rebecca},
  booktitle={2005 Australian Software Engineering Conference},
  pages={212--221},
  year={2005},
  organization={IEEE}
}

@article{gui2007ranking,
  title={Ranking reusability of software components using coupling metrics},
  author={Gui, Gui and Scott, Paul D},
  journal={Journal of Systems and Software},
  volume={80},
  number={9},
  pages={1450--1459},
  year={2007},
  publisher={Elsevier}
}

@article{gupta2009package,
  title={Package coupling measurement in object-oriented software},
  author={Gupta, Varun and Chhabra, Jitender Kumar},
  journal={Journal of computer science and technology},
  volume={24},
  number={2},
  pages={273--283},
  year={2009},
  publisher={Springer}
}

@inproceedings{harrison1998coupling,
  title={Coupling metrics for object-oriented design},
  author={Harrison, Rachel and Counsell, Steve and Nithi, Reuben},
  booktitle={Proceedings Fifth International Software Metrics Symposium. Metrics (Cat. No. 98TB100262)},
  pages={150--157},
  year={1998},
  organization={IEEE}
}

@inproceedings{du2004refactoring,
  title={Refactoring-improving coupling and cohesion of existing code},
  author={Du Bois, Bart and Demeyer, Serge and Verelst, Jan},
  booktitle={11th working conference on reverse engineering},
  pages={144--151},
  year={2004},
  organization={IEEE}
}

@inproceedings{koetter2019assessing,
  title={Assessing Software Quality of Agile Student Projects by Data-mining Software Repositories},
  author={Koetter, Falko and Kochanowski, Monika and Kintz, Maximilien and Kersjes, Benedikt and Bogicevic, Ivan and Wagner, Stefan},
  booktitle={Proceedings of the 11th International Conference on Computer Supported Education-Volume 2: CSEDU, INSTICC},
  pages={244--251},
  year={2019},
  organization={SciTePress}
}

@article{briand1996property,
  title={Property-based software engineering measurement},
  author={Briand, Lionel C and Morasca, Sandro and Basili, Victor R},
  journal={IEEE transactions on software Engineering},
  volume={22},
  number={1},
  pages={68--86},
  year={1996},
  publisher={IEEE}
}

@inproceedings{zhao2004measuring,
  title={Measuring coupling in aspect-oriented systems},
  author={Zhao, Jianjun},
  booktitle={10th International Software Metrics Symposium (Metrics 04)},
  year={2004}
}

@article{Raemaekers2017,
abstract = {Systems that depend on third-party libraries may have to be updated when updates to these libraries become available in order to benefit from new functionality, security patches, bug fixes, or API improvements. However, often such changes come with changes to the existing interfaces of these libraries, possibly causing rework on the client system. In this paper, we investigate versioning practices in a set of more than 100,000 jar files from Maven Central, spanning over 7 years of history of more than 22,000 different libraries. We investigate to what degree versioning conventions are followed in this repository. Semantic versioning provides strict rules regarding major (breaking changes allowed), minor (no breaking changes allowed), and patch releases (only backward-compatible bug fixes allowed). We find that around one third of all releases introduce at least one breaking change. We perform an empirical study on potential rework caused by breaking changes in library releases and find that breaking changes have a significant impact on client libraries using the changed functionality. We find out that minor releases generally have larger release intervals than major releases. We also investigate the use of deprecation tags and find out that these tags are applied improperly in our dataset.},
author = {Raemaekers, S. and van Deursen, A. and Visser, J.},
doi = {10.1016/j.jss.2016.04.008},
file = {:C$\backslash$:/Users/usuario/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Raemaekers, van Deursen, Visser - 2017 - Semantic versioning and impact of breaking changes in the Maven repository.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Breaking changes,Semantic versioning,Software libraries},
mendeley-groups = {Thesis/5. Experiments,Thesis/5. Experiments/Empirical validation metrics},
month = {jul},
pages = {140--158},
publisher = {Elsevier Inc.},
title = {{Semantic versioning and impact of breaking changes in the Maven repository}},
volume = {129},
year = {2017}
}


@inproceedings{Raemaekers2013,
abstract = {We present the Maven Dependency Dataset (MDD), containing metrics, changes and dependencies of 148,253 jar files. Metrics and changes have been calculated at the level of individual methods, classes and packages of multiple library versions. A complete call graph is also presented which includes call, inheritance, containment and historical relationships between all units of the entire repository. In this paper, we describe our dataset and the methodology used to obtain it. We present different conceptual views of MDD and we also describe limitations and data quality issues that researchers using this data should be aware of. {\textcopyright} 2013 IEEE.},
author = {Raemaekers, Steven and {Van Deursen}, Arie and Visser, Joost},
booktitle = {IEEE International Working Conference on Mining Software Repositories},
doi = {10.1109/MSR.2013.6624031},
file = {:C$\backslash$:/Users/usuario/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Raemaekers, Van Deursen, Visser - 2013 - The maven repository dataset of metrics, changes, and dependencies.pdf:pdf},
isbn = {9781467329361},
issn = {21601852},
keywords = {Data mining,Dataset,Maven repository},
mendeley-groups = {Thesis/5. Experiments,Thesis/1. Introduction,Thesis/5. Experiments/Empirical validation metrics},
pages = {221--224},
title = {{The maven repository dataset of metrics, changes, and dependencies}},
year = {2013}
}


@ARTICLE{weyuker1988evaluating,  author={E. J. {Weyuker}},  journal={IEEE Transactions on Software Engineering},   title={Evaluating software complexity measures},   year={1988},  volume={14},  number={9},  pages={1357-1365},}

@article{Kula2017,
abstract = {Popular (re)use of third-party open-source software (OSS) is evidence of the impact of hosting repositories like maven on software development today. Updating libraries is crucial, with recent studies highlighting the associated vulnerabilities with aging OSS libraries. The decision to migrate to a newer library can range from trivial (security threat) to complex (assessment of work required to accommodate the changes). By leveraging the `wisdom of the software repository crowd' we propose a simple and efficient approach to recommending `consented' library updates. Our Software Universe Graph (SUG) models library dependency and update information mined from super repositories to provide different metrics and visualizations that aid in the update decision. To evaluate, we first constructed a SUG from 188,951 nodes of 6,374 maven unique artifacts. Then, we demonstrate how our metrics and visualizations are applied through real-world examples. As an extension, we show how the SUG can compare dependencies between different super repositories. From a sample of 100 GitHub applications, our method found that on average 79{\%} similar overlapping dependencies combinations exist between the maven and github super repository universes.},
archivePrefix = {arXiv},
arxivId = {1709.04626},
author = {Kula, Raula Gaikovina and {De Roover}, Coen and German, Daniel M. and Ishio, Takashi and Inoue, Katsuro},
eprint = {1709.04626},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/PapersExcel/kula2017.pdf:pdf},
mendeley-groups = {Thesis/7. RelatedWork/Used},
title = {{Modeling Library Dependencies and Updates in Large Software Repository Universes}},
url = {http://arxiv.org/abs/1709.04626},
year = {2017}
}

@article{Brito2018,
abstract = {Modern software development depends on APIs to reuse code and increase productivity. As most software systems, these libraries and frameworks also evolve, which may break existing clients. However, the main reasons to introduce breaking changes in APIs are unclear. Therefore, in this paper, we report the results of an almost 4-month long field study with the developers of 400 popular Java libraries and frameworks. We configured an infrastructure to observe all changes in these libraries and to detect breaking changes shortly after their introduction in the code. After identifying breaking changes, we asked the developers to explain the reasons behind their decision to change the APIs. During the study, we identified 59 breaking changes, confirmed by the developers of 19 projects. By analyzing the developers' answers, we report that breaking changes are mostly motivated by the need to implement new features, by the desire to make the APIs simpler and with fewer elements, and to improve maintainability. We conclude by providing suggestions to language designers, tool builders, software engineering researchers and API developers.},
archivePrefix = {arXiv},
arxivId = {1801.05198},
author = {Brito, Aline and Xavier, Laerte and Hora, Andre and Valente, Marco Tulio},
doi = {10.1109/SANER.2018.8330214},
eprint = {1801.05198},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/papers per utilitzar/Why and How Java developers break APIs.pdf:pdf},
isbn = {9781538649695},
journal = {25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018 - Proceedings},
keywords = {API Evolution,Breaking Changes,Field Study},
mendeley-groups = {Thesis/5. Experiments/Empirical validation metrics},
number = {Dcc},
pages = {255--265},
title = {{Why and how Java developers break APIs}},
volume = {2018-March},
year = {2018}
}

@article{Harrand2019,
abstract = {This paper addresses the following question: does a small, essential, core set of API members emerges from the actual usage of the API by client applications? To investigate this question, we study the 99 most popular libraries available in Maven Central and the 865,560 client programs that declare dependencies towards them, summing up to 2.3M dependencies. Our key findings are as follows: 43.5{\%} of the dependencies declared by the clients are not used in the bytecode; all APIs contain a large part of rarely used types and a few frequently used types, and the ratio varies according to the nature of the API, its size and its design; we can systematically extract a reuse-core from APIs that is sufficient to provide for most clients, the median size of this subset is 17{\%} of the API that can serve 83{\%} of the clients. This study is novel both in its scale and its findings about unused dependencies and the reuse-core of APIs. Our results provide concrete insights to improve Maven's build process with a mechanism to detect unused dependencies. They also support the need to reduce the size of APIs to facilitate API learning and maintenance.},
archivePrefix = {arXiv},
arxivId = {1908.09757},
author = {Harrand, Nicolas and Benelallam, Amine and Soto-Valero, C{\'{e}}sar and Barais, Olivier and Baudry, Benoit},
eprint = {1908.09757},
file = {:C$\backslash$:/Users/usuario/Downloads/1908.09757.pdf:pdf},
mendeley-groups = {Thesis/5. Experiments/Empirical validation metrics},
number = {August},
title = {{Analyzing 2.3 Million Maven Dependencies to Reveal an Essential Core in APIs}},
url = {http://arxiv.org/abs/1908.09757},
year = {2019}
}

@article{Munzner2009,
abstract = {We present a nested model for the visualization design and validation with four layers: characterize the task and data in the vocabulary of the problem domain, abstract into operations and data types, design visual encoding and interaction techniques, and create algorithms to execute techniques efficiently. The output from a level above is input to the level below, bringing attention to the design challenge that an upstream error inevitably cascades to all downstream levels. This model provides prescriptive guidance for determining appropriate evaluation approaches by identifying threats to validity unique to each level. We also provide three recommendations motivated by this model: authors should distinguish between these levels when claiming contributions at more than one of them, authors should explicitly state upstream assumptions at levels above the focus of a paper, and visualization venues should accept more papers on domain characterization. {\textcopyright} 2009 IEEE.},
author = {Munzner, Tamara},
doi = {10.1109/TVCG.2009.111},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/papers per utilitzar/munzner2009.pdf:pdf},
issn = {10772626},
journal = {IEEE Transactions on Visualization and Computer Graphics},
keywords = {Models,design,evaluation,frameworks},
mendeley-groups = {Thesis/5. Experiments,Thesis/5. Experiments/Visualization},
number = {6},
pages = {921--928},
title = {{A nested model for visualization design and validation}},
volume = {15},
year = {2009}
}

@inproceedings{alves2010deriving,
  title={Deriving metric thresholds from benchmark data},
  author={Alves, Tiago L and Ypma, Christiaan and Visser, Joost},
  booktitle={2010 IEEE International Conference on Software Maintenance},
  pages={1--10},
  year={2010},
  organization={IEEE}
}

@book{everitt2002cambridge,
  title={The Cambridge dictionary of statistics},
  author={Everitt, Brian and Skrondal, Anders},
  volume={106},
  year={2002},
  publisher={Cambridge University Press Cambridge}
}

@article{Allier2010,
abstract = {Coupling metrics play an important role in empirical software engineering research as well as in industrial measurement programs. The existing coupling metrics have usually been defined in a way that they can be computed from a static analysis of the source code. However, modern programs extensively use dynamic language features such as polymorphism and dynamic class loading that are difficult to capture by static analysis. Consequently, the derived metric values might not accurately reflect the state of a program. In this paper, we express existing definitions of coupling metrics using call graphs. We then compare the results of four different call graph construction algorithms with standard tool implementations of these metrics in an empirical study. Our results show important variations in coupling between standard and call graph-based calculations due to the support of dynamic features. {\textcopyright} 2010 IEEE.},
author = {Allier, Simon and Vaucher, St{\'{e}}phane and Dufour, Bruno and Sahraoui, Houari},
doi = {10.1109/SCAM.2010.25},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/papers llegits que no se si fare servir/deriving coupling metrics from call graphs.pdf:pdf},
isbn = {9780769541785},
journal = {Proceedings - 10th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2010},
mendeley-groups = {Thesis/7. RelatedWork/Coupling},
pages = {43--52},
title = {{Deriving coupling metrics from call graphs}},
year = {2010}
}

@article{Vernazza2000,
author = {Vernazza, Tullio and Succi, Giancarlo and Granatella, Giampiero},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/papers per utilitzar/10.1.1.205.8052.pdf:pdf},
journal = {submitted to ECOOP'2000},
mendeley-groups = {Thesis/3. TheoreticModel,Thesis/7. RelatedWork/Coupling},
number = {July 2000},
pages = {1--11},
title = {{Defining Metrics for Software Components}},
volume = {XI},
year = {2000}
}

@article{Yang2010,
abstract = {There is an increasing awareness on the importance of software measurement within the software engineering community, as well as the necessity of respecting the scientific basis of measurement. However there is little evidence for the latter as there is a tendency for researchers and practitioners to apply software metrics without a full awareness of what they mean. Coupling, which is the measure of the interdependence between parts of a software system (e.g. classes), is one important property for which many metrics have been defined. While it is widely agreed that there is a relationship between high coupling and poor maintainability, I argue that current empirical evidence toward this is insufficient to promote a full understanding of this relationship. Part of this is due to the lack of coverage of all forms of connections that comprise coupling. To illustrate this I identify a specific, indirect, form of coupling that manifests between two seemingly unrelated parts of the system through hidden connections. My thesis is that there is a relationship between indirect coupling and maintainability. To gather evidence for this I follow a methodology based on the philosophies of key software metrics researchers. This involves operationally defining indirect coupling so that it can be accurately measured, establishing an explanatory model as to the relationship between indirect coupling and maintainability, and finally empirically corroborating this model. i Contents iv},
author = {Yang, Hong Yul},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/indirect coupling/Measuring indirect coupling.pdf:pdf},
mendeley-groups = {Thesis/7. RelatedWork/Coupling},
pages = {160},
title = {{Measuring Indirect Coupling}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.153.4609},
year = {2010}
}

@article{Almugrin2016,
abstract = {Object-oriented systems are dynamic and have to be constantly maintained, or they become aged and irrelevant. Many costly software issues exist due to poorly designed systems and due to systems which are not easy to test or maintain because of poor designs. Martin's metrics (Martin, 2003) are well-known package design metrics that can be used in early stages of software development. However, since Martin's metrics only measure direct coupling, the authors believe that this limits their accuracy. In previous papers (Almugrin et al., 2014; Almugrin and Melton), we began with Martin's principles and used them to modify his coupling, instability and abstractness metrics based on direct and indirect coupling, respectively. In this paper, we present an experimental study to validate the modified global metrics by showing their relationship to maintainability and testability, and then we construct prediction models for these two external quality attributes. The study results indicate that the new metrics are very promising and lead to improved results.},
author = {Almugrin, Saleh and Albattah, Waleed and Melton, Austin},
doi = {10.1016/j.jss.2016.02.024},
file = {:C$\backslash$:/Users/usuario/Documents/UvA/Thesis/literatura/indirect coupling/Using indirect coupling metrics to predict package maintainability and testability.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Abstractness,Coupling,Instability},
mendeley-groups = {Thesis/7. RelatedWork/Coupling},
pages = {298--310},
publisher = {Elsevier Inc.},
title = {{Using indirect coupling metrics to predict package maintainability and testability}},
url = {http://dx.doi.org/10.1016/j.jss.2016.02.024},
volume = {121},
year = {2016}
}

@INPROCEEDINGS{AlmugrinMelton2015,  author={S. {Almugrin} and A. {Melton}},  booktitle={2015 Second International Conference on Trustworthy Systems and Their Applications},   title={Indirect Package Coupling Based on Responsibility in an Agile, Object-Oriented Environment},   year={2015},  volume={},  number={},  pages={110-119},  doi={10.1109/TSA.2015.26}}

@book{martin2002agile,
  title={Agile software development: principles, patterns, and practices},
  author={Martin, Robert C},
  year={2002},
  publisher={Prentice Hall}
}
